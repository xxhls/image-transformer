{"mappings":"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","sources":["src/index.ts","package.json","src/utils/getFiles.ts","src/utils/getFileType.ts","src/core/index.ts"],"sourcesContent":["import { Command } from 'commander';\r\nimport { name, version, description } from '../package.json';\r\nimport getFilesAfterFilter from './utils/getFiles';\r\nimport getFileType from './utils/getFileType';\r\nimport transformerMap from './core';\r\n\r\nconst main = async () => {\r\n    const program = new Command();\r\n\r\n    program\r\n        .name(name)\r\n        .version(version)\r\n        .description(description)\r\n        .requiredOption('--name <pattern>', 'the name of the file, which can be a regular expression')\r\n        .requiredOption('--target <target>', 'the converted target format')\r\n        .option('--recursion <recursion>', 'whether to recursion or not, the default is false', 'false')\r\n        .parse(process.argv);\r\n\r\n    const options = program.opts();\r\n    const { name: pattern, recursion } = options;\r\n\r\n    const patternReg = new RegExp(pattern);\r\n\r\n    const recursionFlag = recursion === 'true' ? true : false;\r\n\r\n    const files = await getFilesAfterFilter(process.cwd(), patternReg, recursionFlag);\r\n    \r\n    files.forEach(async (file) => {\r\n        const fileType = getFileType(file);\r\n\r\n        if (fileType === options.target) return;\r\n\r\n        const transformer = transformerMap.get(fileType);\r\n        if (!transformer) {\r\n            console.log(`Unsupported file type: ${fileType}`);\r\n            return;\r\n        }\r\n\r\n        await transformer(file, options.target);\r\n    });\r\n};\r\n\r\nmain();\r\n","{\n  \"name\": \"@xxhls/image-transformer\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"source\": \"src/index.ts\",\n  \"main\": \"dist/index.js\",\n  \"type\": \"module\",\n  \"types\": \"dist/index.d.ts\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"pnpm run clear && parcel build && pnpm run insert\",\n    \"clear\": \"node bin/clearDist.js\",\n    \"insert\": \"node bin/addComment.js\"\n  },\n  \"bin\": {\n    \"img-t\": \"dist/index.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"chalk\": \"^5.3.0\",\n    \"commander\": \"^12.0.0\",\n    \"fs-extra\": \"^11.2.0\",\n    \"jimp\": \"^0.22.12\"\n  },\n  \"devDependencies\": {\n    \"@parcel/packager-ts\": \"2.12.0\",\n    \"@parcel/transformer-typescript-types\": \"2.12.0\",\n    \"@types/commander\": \"^2.12.2\",\n    \"@types/fs-extra\": \"^11.0.4\",\n    \"@types/node\": \"^20.11.28\",\n    \"buffer\": \"^5.5.0||^6.0.0\",\n    \"events\": \"^3.1.0\",\n    \"parcel\": \"^2.12.0\",\n    \"path-browserify\": \"^1.0.0\",\n    \"process\": \"^0.11.10\",\n    \"ts-node\": \"^10.9.2\",\n    \"typescript\": \"^5.4.2\"\n  }\n}\n","import fs from 'fs-extra';\r\n\r\nconst getFilesR = async (dir: string): Promise<string[]> => {\r\n    const files = await fs.readdir(dir);\r\n    const result: string[] = [];\r\n\r\n    for (const file of files) {\r\n        const filePath = `${dir}/${file}`;\r\n        const stat = await fs.stat(filePath);\r\n\r\n        if (stat.isDirectory()) {\r\n            const subFiles = await getFilesR(filePath);\r\n            result.push(...subFiles);\r\n        } else {\r\n            result.push(filePath);\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nconst getFiles = async (dir: string): Promise<string[]> => {\r\n    const files = await fs.readdir(dir);\r\n    const result: string[] = [];\r\n\r\n    for (const file of files) {\r\n        const filePath = `${dir}/${file}`;\r\n        const stat = await fs.stat(filePath);\r\n\r\n        if (stat.isDirectory()) {\r\n            continue;\r\n        }\r\n\r\n        result.push(filePath);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nconst getFilesAfterFilter = async (dir: string, filter: RegExp, recursionFlag: boolean): Promise<string[]> => {\r\n    const files = await (recursionFlag ? getFilesR(dir) : getFiles(dir));\r\n    return files.filter((file) => filter.test(file)).map((file) => file.replace(/\\\\/g, '/'));\r\n}\r\n\r\nexport default getFilesAfterFilter;\r\n","import path from \"path\";\r\n\r\nconst getFileType = (filePath: string) => {\r\n    const ext = path.extname(filePath);\r\n    return ext.slice(1);\r\n};\r\n\r\nexport default getFileType;\r\n","import Jimp from \"jimp\";\r\n\r\nconst transformer = async (filePath: string, target: string) => {\r\n    const image = await Jimp.read(filePath);\r\n    const outputPath = filePath.replace(/\\.\\w+$/, `.${target}`);\r\n    await image.writeAsync(outputPath);\r\n};\r\n\r\nconst transformerMap = new Map<string, typeof transformer>([\r\n    [\"jpg\", transformer],\r\n    [\"jpeg\", transformer],\r\n    [\"png\", transformer],\r\n    [\"bmp\", transformer],\r\n    [\"tiff\", transformer],\r\n    [\"gif\", transformer],\r\n    // [\"webp\", transformer],\r\n    // [\"avif\", transformer],\r\n    // [\"jxl\", transformer],\r\n]);\r\n\r\nexport default transformerMap;\r\n"],"names":[],"version":3,"file":"index.js.map"}