{"mappings":"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","sources":["src/index.ts","package.json","src/utils/getAllFiles.ts","src/utils/removeDirs.ts","src/utils/filterFileName.ts","src/utils/getFileExtension.ts","src/log/index.ts","src/core/index.ts","src/core/JPEG_JPG_PNG_BMP_TIFF_GIF.ts"],"sourcesContent":["import { Command } from 'commander';\r\nimport { name, version, description } from '../package.json';\r\nimport { getAllFiles } from './utils/getAllFiles';\r\nimport { removeDirs } from './utils/removeDirs';\r\nimport { filterFileName } from './utils/filterFileName';\r\nimport { getFileExtension } from './utils/getFileExtension';\r\nimport { info, debug, error, warn } from './log/index';\r\nimport transformerMap from './core';\r\n\r\n// 主函数\r\nconst main = async () => {\r\n    const program = new Command();\r\n\r\n    program\r\n        .name(name)\r\n        .version(version)\r\n        .description(description)\r\n        .requiredOption('--name <_name>', 'the name of the file, which can be a regular expression')\r\n        .requiredOption('--target <_target>', 'the converted target format')\r\n        .option('--path <_path>', 'the path of the file, the default is the current directory', process.cwd())\r\n        .option('--recursion <_recursion>', 'whether to recursion or not, the default is false', 'false')\r\n        .parse(process.argv);\r\n\r\n    const options = program.opts();\r\n    \r\n    /**\r\n     * @type {string} _name 文件名\r\n     * @type {string} _target 目标格式\r\n     * @type {string} _path 文件路径\r\n     * @type {string} _recursion 是否递归\r\n     */\r\n    const { name: _name, target: _target, path: _path, recursion: _recursion } = options;\r\n\r\n    // 预览参数\r\n    info(`name: ${_name}, target: ${_target}, path: ${_path}, recursion: ${_recursion}`);\r\n\r\n    // 获取所有文件\r\n    const files = await removeDirs(await getAllFiles(_path, _recursion === 'true' ? true : false));\r\n    info(`Find ${files.length} files`);\r\n    files.forEach((file) => {\r\n        debug(file);\r\n    });\r\n\r\n    // 过滤文件\r\n    const filterFiles = filterFileName(files, _name);\r\n    info(`Find ${filterFiles.length} files after filter`);\r\n    filterFiles.forEach((file) => {\r\n        debug(file);\r\n    });\r\n\r\n    // 检测文件类型\r\n    const supportedTypes = Array.from(transformerMap.keys());\r\n    filterFiles.forEach((file) => {\r\n        const ext = getFileExtension(file);\r\n        if (!supportedTypes.includes(ext)) {\r\n            warn(`Unsupported file type: ${ext}`);\r\n            process.exit(1);\r\n        }\r\n    });\r\n\r\n    let finished = 0;\r\n    // 转换文件\r\n    info(`Start converting files`);\r\n    filterFiles.forEach(async (file) => {\r\n        const ext = getFileExtension(file);\r\n        const transformer = transformerMap.get(ext)!;\r\n        await transformer(file, _target);\r\n        finished++;\r\n        if (finished === filterFiles.length) {\r\n            info(`Converted ${finished} files`);\r\n            info('All files have been converted');\r\n        } else {\r\n            info(`Converted ${finished} files`);\r\n        }\r\n    });\r\n};\r\n\r\nmain();\r\n","{\n  \"name\": \"@xxhls/image-transformer\",\n  \"version\": \"1.1.0\",\n  \"description\": \"\",\n  \"source\": \"src/index.ts\",\n  \"main\": \"dist/index.js\",\n  \"type\": \"module\",\n  \"types\": \"dist/index.d.ts\",\n  \"private\": false,\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"pnpm run clear && parcel build && pnpm run insert\",\n    \"clear\": \"node bin/clearDist.js\",\n    \"insert\": \"node bin/addComment.js\",\n    \"npm:publish\": \"pnpm run build && npm publish --access public\"\n  },\n  \"bin\": {\n    \"img-t\": \"dist/index.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"chalk\": \"^5.3.0\",\n    \"commander\": \"^12.0.0\",\n    \"fs-extra\": \"^11.2.0\",\n    \"jimp\": \"^0.22.12\"\n  },\n  \"devDependencies\": {\n    \"@parcel/packager-ts\": \"2.12.0\",\n    \"@parcel/transformer-typescript-types\": \"2.12.0\",\n    \"@types/commander\": \"^2.12.2\",\n    \"@types/fs-extra\": \"^11.0.4\",\n    \"@types/node\": \"^20.11.28\",\n    \"buffer\": \"^5.5.0||^6.0.0\",\n    \"events\": \"^3.1.0\",\n    \"parcel\": \"^2.12.0\",\n    \"path-browserify\": \"^1.0.0\",\n    \"process\": \"^0.11.10\",\n    \"ts-node\": \"^10.9.2\",\n    \"typescript\": \"^5.4.2\"\n  }\n}\n","import fs from 'fs-extra';\r\nimport { warn } from '../log';\r\n\r\nexport const getAllFiles = async (dir: string, recursionFlag: boolean): Promise<string[]> => {\r\n    const dirents = await fs.readdir(dir, { withFileTypes: true });\r\n    const files = await Promise.all(\r\n        dirents.map((dirent) => {\r\n            const res = `${dir}/${dirent.name}`;\r\n            return dirent.isDirectory() && recursionFlag ? getAllFiles(res, recursionFlag) : res;\r\n        })\r\n    );\r\n    return Array.prototype.concat(...files);\r\n};\r\n","import fs from 'fs-extra';\r\nimport path from 'path';\r\n\r\nexport const removeDirs = async (dirs: string[]): Promise<string[]> => {\r\n    const files: string[] = [];\r\n    \r\n    for (const dir of dirs) {\r\n        const state = fs.lstatSync(dir); \r\n        if (!state.isDirectory()) {\r\n            files.push(dir);\r\n        } \r\n    }\r\n\r\n    return files;\r\n};\r\n","import path from \"path\";\r\n\r\nexport const filterFileName = (files: string[], name: string): string[] => {\r\n    const patternReg = new RegExp(name);\r\n\r\n    return files.filter((file) => {\r\n        return patternReg.test(path.basename(file));\r\n    });\r\n};\r\n","import path from \"path\";\r\n\r\n/**\r\n * 获取文件拓展名\r\n * @param file 文件路径\r\n * @returns 拓展名\r\n */\r\nconst getFileExtension = (file: string): string => {\r\n    return path.extname(file).slice(1);\r\n};\r\n\r\nexport { getFileExtension };\r\n","import chalk from \"chalk\";\r\n\r\nexport const info = (message: string) => {\r\n    console.log(chalk.white.bgGray.bold(\" INFO  \\t\"), chalk.gray(message));\r\n}\r\n\r\nexport const debug = (message: string) => {\r\n    console.log(chalk.white.bgBlue.bold(\" DEBUG \\t\"), chalk.blue(message));\r\n}\r\n\r\nexport const warn = (message: string) => {\r\n    console.log(chalk.white.bgYellow.bold(\" WARN  \\t\"), chalk.yellow(message));\r\n}\r\n\r\nexport const error = (message: string) => {\r\n    console.log(chalk.white.bgRed.bold(\" ERROR \\t\"), chalk.red(message));\r\n}","import transformer_jpeg_jpg_png_bmp_tiff_gif from \"./JPEG_JPG_PNG_BMP_TIFF_GIF\";\r\n\r\ntype Transformer = (filePath: string, target: string) => Promise<void>;\r\n\r\nconst transformerMap = new Map<string, Transformer>([\r\n    [\"jpg\", transformer_jpeg_jpg_png_bmp_tiff_gif],\r\n    [\"jpeg\", transformer_jpeg_jpg_png_bmp_tiff_gif],\r\n    [\"png\", transformer_jpeg_jpg_png_bmp_tiff_gif],\r\n    [\"bmp\", transformer_jpeg_jpg_png_bmp_tiff_gif],\r\n    [\"tiff\", transformer_jpeg_jpg_png_bmp_tiff_gif],\r\n    [\"gif\", transformer_jpeg_jpg_png_bmp_tiff_gif],\r\n]);\r\n\r\nexport default transformerMap;\r\n","import Jimp from \"jimp\";\r\nimport { warn } from \"../log\";\r\nimport fs from 'fs-extra'\r\n\r\nconst transformer_jpeg_jpg_png_bmp_tiff_gif = async (filePath: string, target: string) => {\r\n    const image = await Jimp.read(filePath);\r\n    const outputPath = filePath.replace(/\\.\\w+$/, `.${target}`);\r\n    if (fs.existsSync(outputPath)) {\r\n        warn(`File already exists: ${outputPath}, and it will be overwritten`);\r\n        fs.removeSync(outputPath);\r\n    }\r\n    await image.writeAsync(outputPath);\r\n};\r\n\r\nexport default transformer_jpeg_jpg_png_bmp_tiff_gif;\r\n"],"names":[],"version":3,"file":"index.js.map"}